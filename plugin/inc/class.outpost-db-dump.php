<?php

/*
 * TODO: Stagger writing of each table in dump_table to avoid massive strings stored in $s 
 * TODO: Break large tables into multiple insert statements to avoid out of memory problems when importing (effectively turning off --extended-insert)
 */

// Based loosely on MySQL Dump by David Grudl https://github.com/dg/MySQL-dump
class Outpost_DB_Dump
{

    private $tables = array();
    private $output;

    function __construct($filename)
    {
        global $wpdb;

        $this->get_tables();

        $this->output = fopen($filename, "wb");

        date_default_timezone_set('UTC');
        $time_started = date('l jS \of F Y H:i:s \U\T\C');

        fwrite($this->output,
            "-- WordPress database dump generated by the Outpost plugin\n"
            . "--\n"
            . (isset($wpdb->dbhost) ? "-- Host:     $wpdb->dbhost\n" : '')
            . (isset($wpdb->prefix) ? "-- Database: $wpdb->prefix" : '')
            . (isset($wpdb->dbname) ? $wpdb->dbname . "\n" : '')
            . (isset($_SERVER['HTTP_HOST']) ? "-- Site:     $_SERVER[HTTP_HOST]\n" : '')
            . "-- Date:     $time_started\n"
            . "-- -------------------------------------------------------\n\n"
            . "SET NAMES utf8;\n"
            . "SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO';\n"
            . "SET FOREIGN_KEY_CHECKS=0;\n"
            . "SET UNIQUE_CHECKS=0;\n\n"
        );

        foreach ($this->tables as $table) {
            $this->dump_table($table);
        }

        $time_completed = date('l jS \of F Y H:i:s \U\T\C');
        fwrite($this->output, "-- DUMP COMPLETED ON $time_completed\n");
        fclose($this->output);
    }

    private function get_tables()
    {
        global $wpdb;

        $tables = $wpdb->get_results("SHOW TABLES");

        foreach ($tables as $table) {
            $this->tables[] = $table->{'Tables_in_' . $wpdb->dbname};
        }
    }

    // TODO: Refactor into separate smaller methods
    private function dump_table($table_name)
    {
        global $wpdb;

        // Dump structure
        fwrite($this->output,
            "--\n"
            . "-- Table structure for `$table_name`\n"
            . "--\n\n"
            . "DROP TABLE IF EXISTS `$table_name`;\n"
        );

        $table_structure = $wpdb->get_results("SHOW CREATE TABLE `$table_name`");
        $create_table = $table_structure[0]->{'Create Table'};

        if ($create_table)
            fwrite($this->output, $create_table . ";\n\n");

        // Store columns and column type
        $column_info = $wpdb->get_results("SHOW COLUMNS FROM `$table_name`");
        $column_list = array();
        $types = array();
        
        foreach ($column_info as $info) {
            $column = $info->Field;
            $column_list[] = '`' . str_replace('`', '``', $column) . "`";
            $types[$column] = $info->Type;
        }
        
        $column_list = '(' . implode(', ', $column_list) . ')';

        // Dump contents as INSERT statements
        $rows = $wpdb->get_results("SELECT * FROM `$table_name`");
        $total_rows = count($rows);
                
        fwrite($this->output,
            "--\n"
            . "-- Dumping data for `$table_name`\n"
            . "--\n\n"
        );
        
        if (!$rows){
            fwrite($this->output, "-- [This table was empty]\n\n");
            return;
        }        
      
        $s = "INSERT INTO `$table_name` $column_list VALUES\n";
        
        foreach ($rows as $i => $row) {
            $s .= '(';
            
            $last_key = end(array_keys((array)$row));
            
            foreach ($row as $key => $value) {
                if ($value === null) {
                    $s .= "NULL";
                } else {
                    $s .= "'" . esc_sql($value) . "'"; // this wraps all data types in quotes, but MySQL is smart enough to cast data to the column's data type
                }                
                $s .= ($key == $last_key) ? '' : ",\t";
            }
            
            $s .= ')';
            $s .= ($i + 1 == $total_rows) ? ';' : ',';
            $s .= "\n";
        }
        
        $s .= "\n\n";

        fwrite($this->output, $s);
    }

    private function write()
    {

    }
    
}